digraph subleq { 
  // https://dreampuf.github.io/GraphvizOnline/#digraph%20subleq%20%7B%0A%20%20%2F*%20State%20machine%20of%20a%20SUBLEQ%20One%20Instruction%20Set%20Computer.%0A%20%20Need%20three%20registers%3B%20PC%2C%20A%2C%20B.%20*%2F%0A%20%20START%20-%3E%20A%20%5Blabel%3D%22PC%3D0%22%5D%3B%0A%20%20A%20-%3E%20B%3B%0A%20%20A%20-%3E%20GET%20%5Blabel%3D%22A%3D-1%22%5D%3B%0A%20%20GET%20-%3E%20GET%20%5Blabel%3D%22wait%22%5D%3B%20%2F*%20Get%20a%20character%20from%20UART%2C%20waiting%20for%20it%20*%2F%0A%20%20GET%20-%3E%20GSTB%3B%0A%20%20GSTB%20-%3E%20NEXT%3B%20%20%2F*%20Store%20result%20back%20to%20%5Bb%5D%20*%2F%0A%20%20B%20-%3E%20PLDA%20%5Blabel%3D%22B%3D-1%22%5D%3B%20%2F*%20Put%20a%20character%20to%20UART%2C%20need%20to%20fetch%20character%20first...%20*%2F%0A%20%20PLDA%20-%3E%20PUT%3B%0A%20%20PUT%20-%3E%20PUT%20%5Blabel%3D%22wait%22%5D%3B%20%2F*%20Wait%20for%20UART%20TX%20Queue%20to%20be%20empty%20*%2F%0A%20%20PUT%20-%3E%20NEXT%3A%0A%20%20NEXT%20-%3E%20A%3B%20%2F*%20Increment%20Program%20Counter%20to%20next%20instruction%20*%2F%0A%20%20NEXT%20-%3E%20HALT%20%5Blabel%3D%22PC%3C0%22%5D%3B%0A%20%20B%20-%3E%20STB%3B%0A%20%20STB%20-%3E%20C%20%5Blabel%3D%22LEQ%22%5D%3B%0A%20%20STB%20-%3E%20NEXT%20%5Blabel%3D%22GNEQ%22%5D%3B%0A%20%20C%20-%3E%20A%3B%0A%20%20C%20-%3E%20HALT%20%5Blabel%3D%22PC%3C0%22%5D%3B%0A%0A%20%20START%20%5Bshape%3Dstart%5D%3B%20%2F*%20Start%20or%20Reset%20State%20*%2F%0A%20%20HALT%20%5Bshape%3Dend%5D%3B%20%2F*%20HALT%20state%20happens%20when%20Program%20Counter%20is%20negative%20*%2F%0A%7D
  /* State machine of a SUBLEQ One Instruction Set Computer.  Need three registers; PC, A, B. */

  START -> A [label="PC=0"];
  A -> B;
  A -> GET [label="A=-1"];
  GET -> GET [label="wait"]; /* Get a character from UART, waiting for it */
  GET -> GSTB;
  GSTB -> NEXT;  /* Store result back to [b] */
  B -> PLDA [label="B=-1"]; /* Put a character to UART, need to fetch character first... */
  PLDA -> PUT;
  PUT -> PUT [label="wait"]; /* Wait for UART TX Queue to be empty */
  PUT -> NEXT:
  NEXT -> A; /* Increment Program Counter to next instruction */
  NEXT -> HALT [label="PC<0"];
  B -> STB;
  STB -> C [label="LEQ"];
  STB -> NEXT [label="GNEQ"];
  C -> A;
  C -> HALT [label="PC<0"];

  START [shape=start]; /* Start or Reset State */
  HALT [shape=end]; /* HALT state happens when Program Counter is negative */
}
